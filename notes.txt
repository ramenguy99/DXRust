TODO:
- Reference rasterizer with same resources
    - setup matrices in constant buffer
    - proper pixel shader
    - debug / check everything

- Support more complex scenes 
    - better api for building tlas/blas
    - secondary rays / recursion
    - PBR

- Imgui keyboard
- Smooth resizing
    - Resizing is not smooth because DispatchMessage blocks while resizing
    - To support smooth resizing we would need to draw from the wndproc
    - This requires some restructuring, basically the main loop would have to
      execute inside a closure that we can call from the wndproc

- D3D12 refactoring (ideally complete safe API for all d3d12 features):
    - error callback with panic instead of breakpoint
    - scoped barriers (closures or immutable transparent type with drop)
    - command list / render pass abstraction (render pass on top of list?)
    - Graphics pipeline state helpers
    - Results everywhere (ours and map windows-rs results or just windows-rs?)

Notes:
Drawing big scene:
- One drawcall per mesh
- Execute indirect (with draw index push constant and manual material/transform fetch)
    - Change Vertex buffer view and index buffer view for each draw -> seems wasteful, need to specify all buffers for each drawcall unless we use strides
    - Change StartIndexLocation and BaseVertexLocation for each draw -> seems nice, only need to create 1 big vertex buffer per attribute and 1 big index buffer
    - Use draw index to manually sample an index buffer offset and then do everything manually.


Linker test:
#[build]
#rustflags = ["-C", "link-args=/EXPORT:D3D12SDKPath,DATA /EXPORT:D3D12SDKVersion,DATA"]

#[target.x86_64-pc-windows-msvc]
#rustflags = ["-C", "link-args=/EXPORT:D3D12SDKPath,DATA /EXPORT:D3D12SDKVersion,DATA"]

#[target.x86_64-pc-windows-msvc]
#rustflags = ["-C", "link-args=C:\\Users\\dmylo\\Desktop\\rust\\gray\\agility\\agility.obj /FORCE:MULTIPLE"]

Bug list:
- GPU validation layer breaks raytracing -> disable it
- Root signature descriptors (GPU pointers) are not validated, even when not set they can cause a crash -> set them right or don't use them
- Stale shaders are often not catched by validation -> remember to recompile shaders before running (or compile on the fly)
- Rust RAII releases resource at end of scope -> make sure to keep references to resources that should live longer